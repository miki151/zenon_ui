
export import "std/box.znn";
export import "std/any.znn";
export import "std/hash_map.znn";

export struct UIState {
  hash_map<string, box<any>> state;
};

export UIState() {
  return UIState::UIState(hash_map<string, box<any>>());
}

export template <T> requires construct<T>
T mutable* get_state(UIState mutable* s) {
  const key = to_string(T);
  if (!s^.state.contains(&key))
    s^.state.insert(key, T().box_as<any>());
  return *s^.state.get(&key)^^.cast_to<T>();
}
