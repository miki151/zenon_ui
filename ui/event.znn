export import "std/enum_set.znn";

export import "vec2.znn";
export import "context.znn";
import "ui.znn";
import "data.znn";

export enum key_type {
  UP,
  DOWN,
  LEFT,
  RIGHT,
  ESCAPE,
  SPACE,
  ENTER,
  HOME,
  END,
  BACKSPACE,
  DELETE,
  PAGE_UP,
  PAGE_DOWN,
  TAB,
  F1,
  F2,
  F3,
  F4,
  LCTRL,
  KEYPAD_0,
  KEYPAD_1,
  KEYPAD_2,
  KEYPAD_3,
  KEYPAD_4,
  KEYPAD_5,
  KEYPAD_6,
  KEYPAD_7,
  KEYPAD_8,
  KEYPAD_9,
  A,
  B,
  C,
  D,
  E,
  F,
  G,
  H,
  I,
  J,
  K,
  L,
  M,
  N,
  O,
  P,
  Q,
  R,
  S,
  T,
  U,
  V,
  W,
  X,
  Y,
  Z,
  UNDERSCORE,
  SLASH,
};

export enum key_event_type {
  DOWN,
  UP,
  HELD,
};

export enum key_event_modifier {
  LCTRL,
  LSHIFT,
  LALT
};

export struct key_event {
  key_type key;
  key_event_type type;
  enum_set<key_event_modifier> modifiers;
};

export bool covers(key_event* required, key_event* generated) {
  return required^.key == generated^.key && required^.type == generated^.type &&
      required^.modifiers.is_subset_of(&generated^.modifiers);
}

export enum mouse_event_type {
  LEFT,
  MIDDLE,
  RIGHT,
  MOUSE_MOVEMENT,
  JOYSTICK_LEFT,
  JOYSTICK_RIGHT,
  RIGHT_RELEASED,
  LEFT_RELEASED,
  WHEEL_UP,
  WHEEL_DOWN
};

export struct mouse_event {
  mouse_event_type type;
  vec2 pos;
};

export union ui_event {
  key_event key;
  mouse_event mouse;
  void quit;
  vec2 window_resized;
  string text_input;
  void unknown;
};

export void processEvent(UIElement* ui, UIContext context, rectangle mutable* bounds, ui_event* event) {
  switch (*event) {
    case (quit) {
      if (const r = context.data^.cast_to<UIRecord>())
        if (const res = r^^.elems.get_maybe(&"exit_callback"))
          res^^^.cast_to<box<UICallback>>()^^^.invoke();
    }
    case (key) {
      discard ui^.onKeyEvent(context, bounds, &key);
    }
    case (mouse) {
      discard ui^.onMouseEvent(context, bounds, &mouse);
    }
    case (text_input) {
      discard ui^.onTextEvent(context, bounds, text_input);
    }
    case (window_resized) {
      *bounds = rectangle(vec2(0, 0), window_resized);
    }
    default {}
  }
}